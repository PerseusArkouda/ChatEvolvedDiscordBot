"use strict";var _isotropicMake=_interopRequireDefault(require("isotropic-make"));Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}const _Error=(0,_isotropicMake.default)(Error,{// eslint-disable-line no-restricted-globals
toString(){let a=this.name||"Error";return this.message&&(a+=`: ${this.message}`),a},_getMessage(){return this._message||this.error&&this.error.message||void 0},_getName(){return this._name||this.error&&this.error.name||void 0},_getStack(){if(!this._stack){this._stack=this.toString(),this.details&&(this._stack+=`\nDetails: ${JSON.stringify(this.details,null,4)}`);const a=Error.prepareStackTrace;// eslint-disable-line no-restricted-globals
// eslint-disable-line no-restricted-globals
Error.prepareStackTrace=_Error._prepareStackTrace,this._stack+=`\n${this._getInternalStack()}`,Error.prepareStackTrace=a,this.error&&(this._stack+=`\n-> ${this.error.stack||this.error}`)}return this._stack},_init({details:a,error:b,message:c,name:d}={}){let e;if(Error.captureStackTrace)e={},Error.captureStackTrace(e,_Error);else try{throw new Error;// eslint-disable-line no-restricted-globals
}catch(a){e=a}return Object.defineProperties(this,{details:{enumerable:!0,value:a},error:{enumerable:!0,value:b},message:{enumerable:!0,get:this._getMessage},name:{enumerable:!0,get:this._getName},stack:{get:this._getStack},_getInternalStack:{value:()=>e.stack},_message:{value:c},_name:{value:d},_stack:{writable:!0}}),this}},{_prepareStackTrace(a,b){return b.map(a=>{let b;try{b=a.toString()}catch(a){try{b=`<error: ${a}>`}catch(a){b="<error>"}}return`    at ${b}`}).join("\n")}});var _default=_Error;exports.default=_default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,